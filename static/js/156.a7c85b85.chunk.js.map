{"version":3,"file":"static/js/156.a7c85b85.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/Contact.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","hoc/withRouter.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"fullName\":\"ProfileInfo_fullName__3fR7R\",\"profileAvatar\":\"ProfileInfo_profileAvatar__2yGqg\",\"contact\":\"ProfileInfo_contact__sQB8W\"};","import React, { useEffect, useState } from 'react';\n\n//редактирование статуса пользователя при даблклике\n//реализация через хуки\nconst ProfileStatusWithHooks = (props) => {\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (<div>\n        {//режим отображения статуса\n        !editMode &&\n            <div>\n                <span onDoubleClick={activateEditMode}>\n                Status: {props.status || \"-----\"}\n                </span>\n            </div>\n        }\n        {//режим редактирования статуса\n        editMode &&\n            <div>\n                Status: <input value={status} onBlur={deactivateEditMode} onChange={onStatusChange} autoFocus={true} />\n            </div>\n        }\n    </div>\n    );\n}\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport s_form from '../../common/FormsControls/FormsControls.module.css';\nimport { Field, reduxForm } from 'redux-form';\n\n//форма редактирования данных пользователя(только своего авторизованного)\nconst ProfileDataFormRedux = ({ handleSubmit, profile, error }) => {\n  return <form onSubmit={handleSubmit}>\n    <div className={s.fullName}>\n      <b>Full name:</b> <Field name=\"fullName\" component=\"input\" type=\"text\" placeholder=\"Full name\" />\n    </div>\n    <div><b>Looking for a job:</b>\n      <Field name=\"lookingForAJob\" component=\"input\" type=\"checkbox\" />\n    </div>\n\n    <div><b>My professionl skils:</b> <Field name=\"lookingForAJobDescription\" component=\"textarea\" type=\"text\" placeholder=\"My professionl skils\" /></div>\n\n    <div>\n      <b>About me:</b>\n      <Field name=\"aboutMe\" component=\"textarea\" type=\"text\" placeholder=\"About me\" />\n    </div>\n\n    <div><b>Contacts:</b></div>\n\n    {//возвращает массив ключей и проходится по каждому через ф-ю map, которая возвращает разметку для каждой строчки контактов пользователя(его соцсетей)\n    Object.keys(profile.contacts).map(key => {\n      return <div key={key} className={s.contact}><b>{key}:</b> <Field name={'contacts.' + key} component=\"input\" type=\"text\" placeholder={key} /></div>\n    })}\n\n    {//если есть ошибки в форме, выводится блок с информацией ошибки\n    error && <div className={s_form.formSummaryError}>\n      {error}\n    </div>}\n\n    <div>\n      <button>Save</button>\n    </div>\n  </form>\n}\n\nconst ProfileDataForm = reduxForm({\n  form: 'profile-redux-form',\n  destroyOnUnmount: false\n})(ProfileDataFormRedux);\n\nexport default ProfileDataForm;","import React from \"react\";\nimport s from './ProfileInfo.module.css';\n\n//разметка для строки из списка контактов(сслыки на соцети пользователя) на странице профиля\nconst Contact = ({ contactTitle, contactValue }) => {\n  if (!contactValue) {\n    return;\n  }\n  return <div className={s.contact}>\n    <b>{contactTitle}:</b> {contactValue}\n  </div>\n}\n\nexport default Contact;","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from '../../common/Preloader/Preloader';\nimport defaultAvatar from '../../../assets/images/avatar_default.png';\n//import ProfileStatus from './ProfileStatus';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport { useState } from 'react';\nimport ProfileDataForm from './ProfileDataForm';\nimport Contact from './Contact';\n\nconst ProfileInfo = (props) => {\n  let [editMode, setEditMode] = useState(false); //хук переключатель режима редактирования данных пользователя\n\n  const onSubmit = (formData) => {\n    props.saveProfile(formData)\n      .then((result) => {\n        if (result != false) {\n          setEditMode(false);\n        }\n      });\n  }\n\n  const onMainPhotoSelected = (e) => {\n    if (e.target.files.length) {\n      props.savePhoto(e.target.files[0]);\n    }\n  }\n\n  if (!props.profile) {\n    return <Preloader />;\n  }\n\n  return (\n    <div>\n      <div className={s.descriptionBlock}>\n        <div className={s.profileAvatar}>\n          <img src={props.profile.photos.large\n            ? props.profile.photos.large\n            : defaultAvatar} />\n          {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n        </div>\n        {//переключатель режима редактирования данных пользователя\n        editMode\n          ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit} />\n          : <ProfileData profile={props.profile} status={props.status} updateStatus={props.updateStatus} isOwner={props.isOwner} goToEditMode={() => { setEditMode(true) }} />}\n\n      </div>\n    </div>\n  );\n}\n\nconst ProfileData = (props) => {\n  return <div>\n    {props.isOwner &&\n      <div>\n        <button onClick={props.goToEditMode}>Edit</button>\n      </div>\n    }\n    <div className={s.fullName}>{props.profile.fullName}</div>\n    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\n    <div><b>Looking for a job:</b> {props.profile.lookingForAJob ? 'Yes' : 'No'}</div>\n    {props.profile.lookingForAJobDescription &&\n      <div><b>My professionl skils:</b> {props.profile.lookingForAJobDescription}</div>}\n\n    {props.profile.aboutMe && <div>\n      <b>About me:</b> {props.profile.aboutMe}\n    </div>}\n\n    {//если заполнена хоть одна строчка контактов, выводится строка \"Contacts\"\n    (props.profile.contacts.github\n      || props.profile.contacts.vk\n      || props.profile.contacts.facebook\n      || props.profile.contacts.instagram\n      || props.profile.contacts.twitter\n      || props.profile.contacts.website\n      || props.profile.contacts.youtube\n      || props.profile.contacts.mainLink)\n      ? <div><b>Contacts:</b></div>\n      : ''}\n\n    {//возвращает массив ключей и проходится по каждому через ф-ю map, которая возвращает разметку для каждой строчки контактов пользователя(его соцсетей)\n    Object.keys(props.profile.contacts).map(key => {\n      return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]} />\n    })}\n\n  </div>\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__dvM-z\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport s from './Post.module.css';\n\n//отрисовка одного поста\nconst Post = (props) => {\n  return (\n    <div className={s.item}>\n      <img src=\"https://imgix.bustle.com/uploads/image/2022/12/22/bc9d8fc7-5855-431a-820c-51ebeb6c7fcf-3e2ba297-d13b-4d9c-b91c-622b2c9a46dd-avatar-the-way-of-water612-4.jpg?w=350&fit=crop&crop=faces&auto=format%2Ccompress\" />\n      {props.message}\n      <div>\n        <span>{props.likeCount} like(s)</span>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport { Field, reduxForm } from 'redux-form';\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\nimport { TextArea } from '../../common/FormsControls/FormsControls';\n\n//форма добавления нового поста в ленту\nconst AddNewPostForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field component={TextArea} name=\"newPost\" placeholder=\"Enter new post\" validate={[required, maxLengthCreator(15)]}/>\n      </div>\n      <div>\n        <button>Add post</button>\n      </div>\n    </form >\n  );\n}\n\nconst NewPostReduxForm = reduxForm({ form: 'addNewPostForm' })(AddNewPostForm);\n\n//React.memo - оптимизация отрисовки, аналог PureComponent в классовой компоненте\nconst MyPosts = React.memo((props) => {\n\n  let postsElements = [...props.posts].reverse().map(p => <Post key={p.id} message={p.post} likeCount={p.likeCount} />);\n\n  const onSubmit = (formData) => {\n    props.addPost(formData.newPost);\n  }\n\n  return (\n    <div className={s.postBlock}>\n      <h3>My posts</h3>\n\n      <NewPostReduxForm onSubmit={onSubmit} />\n\n      <div className={s.posts}>\n        {postsElements}\n      </div>\n    </div>\n  );\n});\n\nexport default MyPosts;","import React from 'react';\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\nimport MyPosts from './MyPosts';\nimport { connect } from 'react-redux';\n\nlet mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText\n\n  };\n}\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPost) => {\n      dispatch(addPostActionCreator(newPost));\n    }\n  };\n}\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport s from './Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\n\nconst Profile = (props) => {\n  return (\n    <div>\n      <ProfileInfo isOwner={props.isOwner} \n                profile={props.profile} \n                status={props.status} \n                updateStatus={props.updateStatus}\n                savePhoto={props.savePhoto}\n                saveProfile={props.saveProfile} />\n      <MyPostsContainer store={props.store} />\n    </div>\n  );\n}\n \nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { getProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\nimport { Navigate } from \"react-router-dom\";\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\nimport { withRouter } from '../../hoc/withRouter';\n\nclass ProfileContainer extends React.Component {\n\n  //локальный стейт для редиректа на страницу логина, когда не авторизованы и не настранице конеретного пользователя\n  state = {\n    isRedirectRoLogin: false\n  }\n\n  activateRedirectToLogin = () => {\n    this.setState({\n      isRedirectRoLogin: true\n    });\n  }\n\n  deactivateRedirectToLogin = () => {\n    this.setState({\n      isRedirectRoLogin: false\n    });\n  }\n\n  refreshProfile() {\n    let profileId = this.props.router.params.profileId;\n    if (!profileId) {\n      profileId = this.props.currentUserId;\n      if (!profileId) {\n        this.activateRedirectToLogin();\n      }\n\n    }\n    if (profileId) {\n      this.props.getProfile(profileId);\n      this.props.getStatus(profileId);\n    }\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.router.params.profileId != prevProps.router.params.profileId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    //редирект на страницу логина\n    if (this.state.isRedirectRoLogin) {\n      this.deactivateRedirectToLogin();\n      return <Navigate to={\"/login\"} />;\n    } else {\n      return (\n        <div>\n          <Profile {...this.props}\n            isOwner={!this.props.router.params.profileId}\n            profile={this.props.profile}\n            status={this.props.status}\n            updateStatus={this.props.updateStatus}\n            savePhoto={this.props.savePhoto}\n            saveProfile={this.props.saveProfile} />\n        </div>\n      );\n    }\n  }\n}\n\nlet mapStateToProps = (state) => ({\n  profile: state.profilePage.profile,\n  currentUserId: state.auth.userId,\n  isAuth: state.auth.isAuth,\n  status: state.profilePage.status,\n});\n\nexport default compose(\n  withRouter,\n  //withAuthRedirect,\n  connect(mapStateToProps, { getProfile, getStatus, updateStatus, savePhoto, saveProfile })\n)(ProfileContainer);","import React from \"react\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\n\n// wrapper to use react router's v6 hooks in class component(to use HOC pattern, like in router v5)\n//для вытаскивания данных из урла\nexport const withRouter = (Component) => {\n    function ComponentWithRouterProp(props) {\n      let location = useLocation();\n      let navigate = useNavigate();\n      let params = useParams();\n      return (\n        <Component\n          {...props}\n          router={{ location, navigate, params }}\n        />\n      );\n    }\n  \n    return ComponentWithRouterProp;\n  }"],"names":["props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsxs","children","_jsx","onDoubleClick","activateEditMode","value","onBlur","deactivateEditMode","updateStatus","onChange","e","currentTarget","autoFocus","reduxForm","form","destroyOnUnmount","_ref","handleSubmit","profile","error","onSubmit","className","s","Field","name","component","type","placeholder","Object","keys","contacts","map","key","s_form","formSummaryError","contactTitle","contactValue","ProfileData","isOwner","onClick","goToEditMode","fullName","ProfileStatusWithHooks","lookingForAJob","lookingForAJobDescription","aboutMe","github","vk","facebook","instagram","twitter","website","youtube","mainLink","Contact","src","photos","large","defaultAvatar","target","files","length","savePhoto","ProfileDataForm","initialValues","formData","saveProfile","then","result","Preloader","message","likeCount","NewPostReduxForm","TextArea","validate","required","maxLengthCreator","React","postsElements","posts","reverse","p","Post","post","id","addPost","newPost","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","store","ProfileContainer","constructor","arguments","isRedirectRoLogin","activateRedirectToLogin","this","setState","deactivateRedirectToLogin","refreshProfile","profileId","router","params","currentUserId","getProfile","getStatus","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","Navigate","to","Profile","compose","Component","location","useLocation","navigate","useNavigate","useParams","auth","userId","isAuth"],"sourceRoot":""}