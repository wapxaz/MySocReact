{"version":3,"file":"static/js/12.9260fd9b.chunk.js","mappings":"0IACA,QAAmC,sCAAnC,EAAoF,8BAApF,EAAkI,mCAAlI,EAA+K,6B,kCCQ/K,MAwCA,EAxCqDA,IACjD,IAAKC,EAAUC,IAAeC,EAAAA,EAAAA,WAAkB,IAC3CC,EAAQC,IAAaF,EAAAA,EAAAA,UAAiBH,EAAMI,SAEjDE,EAAAA,EAAAA,YAAU,KACND,EAAUL,EAAMI,OAAO,GACxB,CAACJ,EAAMI,SAeV,OAAQG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EAEHP,IACGQ,EAAAA,EAAAA,KAAA,OAAAD,UACID,EAAAA,EAAAA,MAAA,QAAMG,cAjBOC,KACrBT,GAAY,EAAK,EAgB6BM,SAAA,CAAC,WAC9BR,EAAMI,QAAU,aAKjCH,IACIM,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,YACOC,EAAAA,EAAAA,KAAA,SAAOG,MAAOR,EAAQS,OArBfC,KACvBZ,GAAY,GACZF,EAAMe,aAAaX,EAAO,EAmBwCY,SAhB9CC,IACpBZ,EAAUY,EAAEC,cAAcN,MAAM,EAe4DO,WAAW,SAGrG,E,kCCnCV,MAuCA,GALwBC,EAAAA,EAAAA,GAAkC,CACxDC,KAAM,qBACNC,kBAAkB,GAFIF,EAlCsEG,IAAuC,IAAtC,aAAEC,EAAY,QAAEC,EAAO,MAAEC,GAAOH,EAC7H,OAAOhB,EAAAA,EAAAA,MAAA,QAAMoB,SAAUH,EAAahB,SAAA,EAClCD,EAAAA,EAAAA,MAAA,OAAKqB,UAAWC,EAAWrB,SAAA,EACzBC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eAAc,KAACC,EAAAA,EAAAA,KAACqB,EAAAA,EAAK,CAACC,KAAK,WAAWC,UAAU,QAAQC,KAAK,OAAOC,YAAY,kBAErF3B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EAAKC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wBACNC,EAAAA,EAAAA,KAACqB,EAAAA,EAAK,CAACC,KAAK,iBAAiBC,UAAU,QAAQC,KAAK,iBAGtD1B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EAAKC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,0BAAyB,KAACC,EAAAA,EAAAA,KAACqB,EAAAA,EAAK,CAACC,KAAK,4BAA4BC,UAAU,WAAWC,KAAK,OAAOC,YAAY,6BAEvH3B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eACHC,EAAAA,EAAAA,KAACqB,EAAAA,EAAK,CAACC,KAAK,UAAUC,UAAU,WAAWC,KAAK,OAAOC,YAAY,iBAGrEzB,EAAAA,EAAAA,KAAA,OAAAD,UAAKC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBAGR2B,OAAOC,KAAKX,EAAQY,UAAUC,KAAIC,IACzBhC,EAAAA,EAAAA,MAAA,OAAeqB,UAAWC,EAAUrB,SAAA,EAACD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAI+B,EAAI,OAAK,KAAC9B,EAAAA,EAAAA,KAACqB,EAAAA,EAAK,CAACC,KAAM,YAAcQ,EAAKP,UAAU,QAAQC,KAAK,OAAOC,YAAaK,MAApHA,KAInBb,IAASjB,EAAAA,EAAAA,KAAA,OAAKmB,UAAWY,EAAAA,EAAOC,iBAAiBjC,SAC9CkB,KAGHjB,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,aAEL,ICxBT,EATqCe,IAAqC,IAApC,aAAEmB,EAAY,aAAEC,GAAcpB,EAClE,GAAKoB,EAGL,OAAOpC,EAAAA,EAAAA,MAAA,OAAKqB,UAAWC,EAAUrB,SAAA,EAC/BD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAIkC,EAAa,OAAK,IAAEC,IACpB,ECsDFC,EAA+C5C,GAC7B,OAAlBA,EAAMyB,SACDhB,EAAAA,EAAAA,KAAAoC,EAAAA,SAAA,CAAArC,SAAE,mCAGJD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACJR,EAAM8C,UACLrC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,UAAQsC,QAAS/C,EAAMgD,aAAaxC,SAAC,YAGzCC,EAAAA,EAAAA,KAAA,OAAKmB,UAAWC,EAAWrB,SAAER,EAAMyB,QAAQwB,YAC3CxC,EAAAA,EAAAA,KAACyC,EAAsB,CAAC9C,OAAQJ,EAAMI,OAAQW,aAAcf,EAAMe,gBAClER,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EAAKC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uBAAsB,IAAER,EAAMyB,QAAQ0B,eAAiB,MAAQ,QACtEnD,EAAMyB,QAAQ2B,4BACb7C,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EAAKC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,0BAAyB,IAAER,EAAMyB,QAAQ2B,6BAElDpD,EAAMyB,QAAQ4B,UAAW9C,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cAAa,IAAER,EAAMyB,QAAQ4B,WAI/BrD,EAAMyB,QAAQY,SAASiB,QACnBtD,EAAMyB,QAAQY,SAASkB,IACvBvD,EAAMyB,QAAQY,SAASmB,UACvBxD,EAAMyB,QAAQY,SAASoB,WACvBzD,EAAMyB,QAAQY,SAASqB,SACvB1D,EAAMyB,QAAQY,SAASsB,SACvB3D,EAAMyB,QAAQY,SAASuB,SACvB5D,EAAMyB,QAAQY,SAASwB,UACxBpD,EAAAA,EAAAA,KAAA,OAAAD,UAAKC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBACR,GAGJ2B,OAAOC,KAAKpC,EAAMyB,QAAQY,UAAUC,KAAIC,GAChB,OAAlBvC,EAAMyB,SACDhB,EAAAA,EAAAA,KAAAoC,EAAAA,SAAA,CAAArC,SAAE,mCAEJC,EAAAA,EAAAA,KAACqD,EAAO,CAAWpB,aAAcH,EAAKI,aAAc3C,EAAMyB,QAAQY,SAASE,IAA7DA,QAM7B,EA5F0CvC,IACxC,IAAKC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,GAiBvC,OAAKH,EAAMyB,SAKThB,EAAAA,EAAAA,KAAA,OAAAD,UACED,EAAAA,EAAAA,MAAA,OAAKqB,UAAWC,EAAmBrB,SAAA,EACjCD,EAAAA,EAAAA,MAAA,OAAKqB,UAAWC,EAAgBrB,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKsD,IAAK/D,EAAMyB,QAAQuC,OAAOC,MAC3BjE,EAAMyB,QAAQuC,OAAOC,MACrBC,IACHlE,EAAM8C,UAAWrC,EAAAA,EAAAA,KAAA,SAAOwB,KAAM,OAAQjB,SAjBlBC,IACvBA,EAAEkD,OAAOC,MAAMC,QACjBrE,EAAMsE,UAAUrD,EAAEkD,OAAOC,MAAM,GACjC,OAiBMnE,GACIQ,EAAAA,EAAAA,KAAC8D,EAAe,CAACC,cAAexE,EAAMyB,QAASA,QAASzB,EAAMyB,QAASE,SA9BjE8C,IAChBzE,EAAM0E,YAAYD,GACfE,MAAMC,IACS,GAAVA,GACF1E,GAAY,EACd,GACA,KAyBMO,EAAAA,EAAAA,KAACmC,EAAW,CAACnB,QAASzB,EAAMyB,QAASrB,OAAQJ,EAAMI,OAAQW,aAAcf,EAAMe,aAAc+B,QAAS9C,EAAM8C,QAASE,aAAcA,KAAQ9C,GAAY,EAAK,UAf/JO,EAAAA,EAAAA,KAACoE,EAAAA,EAAS,GAkBX,E,aCxDV,QAA4B,2BAA5B,EAA+D,uBCA/D,EAAuB,mBCmBvB,EAZmC7E,IAE/BO,EAAAA,EAAAA,MAAA,OAAKqB,UAAWC,EAAOrB,SAAA,EACrBC,EAAAA,EAAAA,KAAA,OAAKsD,IAAI,kNACR/D,EAAM8E,SACPrE,EAAAA,EAAAA,KAAA,OAAAD,UACED,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAOR,EAAM+E,UAAU,mB,wBCL/B,MAaMC,GAAmB5D,EAAAA,EAAAA,GAAwB,CAAEC,KAAM,kBAAhCD,EAb0CpB,IAE/DO,EAAAA,EAAAA,MAAA,QAAMoB,SAAU3B,EAAMwB,aAAahB,SAAA,EACjCC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACqB,EAAAA,EAAK,CAACE,UAAWiD,EAAAA,EAAUlD,KAAK,UAAUG,YAAY,iBAAiBgD,SAAU,CAACC,EAAAA,GAAUC,EAAAA,EAAAA,GAAiB,UAEhH3E,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,oBAqChB,EArB4C6E,EAAAA,MAAYrF,IAEtD,IAAIsF,EAAgB,IAAItF,EAAMuF,OAAOC,UAAUlD,KAAImD,IAAKhF,EAAAA,EAAAA,KAACiF,EAAI,CAAYZ,QAASW,EAAEE,KAAMZ,UAAWU,EAAEV,WAApCU,EAAEG,MAMrE,OACErF,EAAAA,EAAAA,MAAA,OAAKqB,UAAWC,EAAYrB,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cAEJC,EAAAA,EAAAA,KAACuE,EAAgB,CAACrD,SARJ8C,IAChBzE,EAAM6F,QAAQpB,EAASqB,QAAQ,KAS7BrF,EAAAA,EAAAA,KAAA,OAAKmB,UAAWC,EAAQrB,SACrB8E,MAEC,I,aC7BV,MAEA,GAFyBS,EAAAA,EAAAA,KAPFC,IACd,CACLT,MAAOS,EAAMC,YAAYV,SAKoF,CAACM,QAASK,EAAAA,GAAQC,sBAA1GJ,CAAiIK,GCQ1J,EAdsCpG,IAElCO,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAC4F,EAAW,CAACvD,QAAS9C,EAAM8C,QAClBrB,QAASzB,EAAMyB,QACfrB,OAAQJ,EAAMI,OACdW,aAAcf,EAAMe,aACpBuD,UAAWtE,EAAMsE,UACjBI,YAAa1E,EAAM0E,eAC7BjE,EAAAA,EAAAA,KAAC6F,EAAgB,O,wBCgBvB,MAAMC,UAAyBlB,EAAAA,UAAsCmB,WAAAA,GAAA,SAAAC,WAEnE,KACAT,MAAQ,CACNU,mBAAmB,GACpB,KAEDC,wBAA0B,KACxBC,KAAKC,SAAS,CACZH,mBAAmB,GACnB,EACH,KAEDI,0BAA4B,KAC1BF,KAAKC,SAAS,CACZH,mBAAmB,GACnB,CACH,CAEDK,cAAAA,GACE,IAAIC,EAAYJ,KAAK5G,MAAMiH,OAAOC,OAAOF,UACpCA,IACHA,EAAYJ,KAAK5G,MAAMmH,cAClBH,GACHJ,KAAKD,2BAILK,IACFJ,KAAK5G,MAAMoH,WAAWJ,GACtBJ,KAAK5G,MAAMqH,UAAUL,GAEzB,CAEAM,iBAAAA,GACEV,KAAKG,gBACP,CAEAQ,kBAAAA,CAAmBC,EAAsBC,GACnCb,KAAK5G,MAAMiH,OAAOC,OAAOF,WAAaQ,EAAUP,OAAOC,OAAOF,WAChEJ,KAAKG,gBAET,CAEAW,MAAAA,GAEE,OAAId,KAAKZ,MAAMU,mBACbE,KAAKE,6BACErG,EAAAA,EAAAA,KAACkH,EAAAA,GAAQ,CAACC,GAAI,aAGnBnH,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACoH,EAAO,IAAKjB,KAAK5G,MAChB8C,SAAU8D,KAAK5G,MAAMiH,OAAOC,OAAOF,UACnCvF,QAASmF,KAAK5G,MAAMyB,QACpBrB,OAAQwG,KAAK5G,MAAMI,OACnBW,aAAc6F,KAAK5G,MAAMe,aACzBuD,UAAWsC,KAAK5G,MAAMsE,UACtBI,YAAakC,KAAK5G,MAAM0E,eAIlC,EAUF,SAAeoD,EAAAA,EAAAA,KC1GR,SAA+DC,GAClE,OAAQ/H,IACN,IAAIgI,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXjB,GAASkB,EAAAA,EAAAA,MACb,OAAO3H,EAAAA,EAAAA,KAACsH,EAAgB,IAAK/H,EAAciH,OAAQ,CAAEe,WAAUE,WAAUhB,WAAY,CAEzF,IDsGAnB,EAAAA,EAAAA,KAVqBC,IAAmB,CACxCvE,QAASuE,EAAMC,YAAYxE,QAC3B0F,cAAenB,EAAMqC,KAAKC,OAC1BC,OAAQvC,EAAMqC,KAAKE,OACnBnI,OAAQ4F,EAAMC,YAAY7F,UAMwE,CAAEgH,WAAU,KAAEC,UAAS,KAAEtG,aAAY,KAAEuD,UAAS,KAAEI,YAAY,OAHlK,CAIE6B,E","sources":["webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withRouter.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"fullName\":\"ProfileInfo_fullName__3fR7R\",\"profileAvatar\":\"ProfileInfo_profileAvatar__2yGqg\",\"contact\":\"ProfileInfo_contact__sQB8W\"};","import React, { ChangeEvent, useEffect, useState } from 'react';\n\ntype PropsType = {\n    status: string \n    updateStatus: (status: string) => void\n}\n\n//редактирование статуса пользователя при даблклике\n//реализация через хуки\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\n    let [editMode, setEditMode] = useState<boolean>(false);\n    let [status, setStatus] = useState<string>(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (<div>\n        {//режим отображения статуса\n        !editMode &&\n            <div>\n                <span onDoubleClick={activateEditMode}>\n                Status: {props.status || \"-----\"}\n                </span>\n            </div>\n        }\n        {//режим редактирования статуса\n        editMode &&\n            <div>\n                Status: <input value={status} onBlur={deactivateEditMode} onChange={onStatusChange} autoFocus={true} />\n            </div>\n        }\n    </div>\n    );\n}\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport s_form from '../../common/FormsControls/FormsControls.module.css';\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\nimport { ProfileType } from '../../../types/types';\n\ntype PropsType = {\n  profile: ProfileType\n}\n//форма редактирования данных пользователя(только своего авторизованного)\nconst ProfileDataFormRedux: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit, profile, error }) => {\n  return <form onSubmit={handleSubmit}>\n    <div className={s.fullName}>\n      <b>Full name:</b> <Field name=\"fullName\" component=\"input\" type=\"text\" placeholder=\"Full name\" />\n    </div>\n    <div><b>Looking for a job:</b>\n      <Field name=\"lookingForAJob\" component=\"input\" type=\"checkbox\" />\n    </div>\n\n    <div><b>My professionl skils:</b> <Field name=\"lookingForAJobDescription\" component=\"textarea\" type=\"text\" placeholder=\"My professionl skils\" /></div>\n\n    <div>\n      <b>About me:</b>\n      <Field name=\"aboutMe\" component=\"textarea\" type=\"text\" placeholder=\"About me\" />\n    </div>\n\n    <div><b>Contacts:</b></div>\n\n    {//возвращает массив ключей и проходится по каждому через ф-ю map, которая возвращает разметку для каждой строчки контактов пользователя(его соцсетей)\n    Object.keys(profile.contacts).map(key => {\n      return <div key={key} className={s.contact}><b>{key}:</b> <Field name={'contacts.' + key} component=\"input\" type=\"text\" placeholder={key} /></div>\n    })}\n\n    {//если есть ошибки в форме, выводится блок с информацией ошибки\n    error && <div className={s_form.formSummaryError}>\n      {error}\n    </div>}\n\n    <div>\n      <button>Save</button>\n    </div>\n  </form>\n}\n\nconst ProfileDataForm = reduxForm<ProfileType, PropsType>({\n  form: 'profile-redux-form',\n  destroyOnUnmount: false\n})(ProfileDataFormRedux);\n\nexport default ProfileDataForm;","import React from \"react\";\nimport s from './ProfileInfo.module.css';\n\ntype PropsType = {\n  contactTitle: string\n  contactValue: string\n}\n//разметка для строки из списка контактов(сслыки на соцети пользователя) на странице профиля\nconst Contact: React.FC<PropsType> = ({ contactTitle, contactValue }) => {\n  if (!contactValue) {\n    return;\n  }\n  return <div className={s.contact}>\n    <b>{contactTitle}:</b> {contactValue}\n  </div>\n}\n\nexport default Contact;","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from '../../common/Preloader/Preloader.tsx';\nimport defaultAvatar from '../../../assets/images/avatar_default.png';\n//import ProfileStatus from './ProfileStatus';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks.tsx';\nimport { useState } from 'react';\nimport ProfileDataForm from './ProfileDataForm.tsx';\nimport Contact from './Contact.tsx';\nimport { AppStateType } from '../../../redux/redux-store.ts';\nimport { ProfileType } from '../../../types/types.ts';\n\ntype PropsType = {\n  profile: AppStateType[\"profilePage\"][\"profile\"] | null\n  isOwner: boolean\n  status: string\n  savePhoto: (file: File) => void\n  saveProfile: (profileData: ProfileType) => void\n  updateStatus: (status: string) => void\n}\nconst ProfileInfo: React.FC<PropsType> = (props) => {\n  let [editMode, setEditMode] = useState(false); //хук переключатель режима редактирования данных пользователя\n\n  const onSubmit = (formData) => {\n    props.saveProfile(formData)\n      .then((result) => {\n        if (result != false) {\n          setEditMode(false);\n        }\n      });\n  }\n\n  const onMainPhotoSelected = (e) => {\n    if (e.target.files.length) {\n      props.savePhoto(e.target.files[0]);\n    }\n  }\n\n  if (!props.profile) {\n    return <Preloader />;\n  }\n\n  return (\n    <div>\n      <div className={s.descriptionBlock}>\n        <div className={s.profileAvatar}>\n          <img src={props.profile.photos.large\n            ? props.profile.photos.large\n            : defaultAvatar} />\n          {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n        </div>\n        {//переключатель режима редактирования данных пользователя\n          editMode\n            ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit} />\n            : <ProfileData profile={props.profile} status={props.status} updateStatus={props.updateStatus} isOwner={props.isOwner} goToEditMode={() => { setEditMode(true) }} />}\n\n      </div>\n    </div>\n  );\n}\n\ntype ProfileDataPropsType = {\n  isOwner: boolean\n  profile: ProfileType | null //AppStateType[\"profilePage\"][\"profile\"] | null\n  status: string\n  goToEditMode: () => void\n  updateStatus: (newStatus: string) => void\n}\nconst ProfileData: React.FC<ProfileDataPropsType> = (props) => {\n  if (props.profile === null) {\n    return <>Error: Profile is not be null</>\n  }\n\n  return <div>\n    {props.isOwner &&\n      <div>\n        <button onClick={props.goToEditMode}>Edit</button>\n      </div>\n    }\n    <div className={s.fullName}>{props.profile.fullName}</div>\n    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\n    <div><b>Looking for a job:</b> {props.profile.lookingForAJob ? 'Yes' : 'No'}</div>\n    {props.profile.lookingForAJobDescription &&\n      <div><b>My professionl skils:</b> {props.profile.lookingForAJobDescription}</div>}\n\n    {props.profile.aboutMe && <div>\n      <b>About me:</b> {props.profile.aboutMe}\n    </div>}\n\n    {//если заполнена хоть одна строчка контактов, выводится строка \"Contacts\"\n      (props.profile.contacts.github\n        || props.profile.contacts.vk\n        || props.profile.contacts.facebook\n        || props.profile.contacts.instagram\n        || props.profile.contacts.twitter\n        || props.profile.contacts.website\n        || props.profile.contacts.youtube\n        || props.profile.contacts.mainLink)\n        ? <div><b>Contacts:</b></div>\n        : ''}\n\n    {//возвращает массив ключей и проходится по каждому через ф-ю map, которая возвращает разметку для каждой строчки контактов пользователя(его соцсетей)\n      Object.keys(props.profile.contacts).map(key => {\n        if (props.profile === null) {\n          return <>Error: Profile is not be null</>\n        }\n        return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]} />\n      })}\n\n  </div>\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__dvM-z\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport s from './Post.module.css';\n\ntype PropsType = {\n  message: string\n  likeCount: number\n}\n//отрисовка одного поста\nconst Post: React.FC<PropsType> = (props) => {\n  return (\n    <div className={s.item}>\n      <img src=\"https://imgix.bustle.com/uploads/image/2022/12/22/bc9d8fc7-5855-431a-820c-51ebeb6c7fcf-3e2ba297-d13b-4d9c-b91c-622b2c9a46dd-avatar-the-way-of-water612-4.jpg?w=350&fit=crop&crop=faces&auto=format%2Ccompress\" />\n      {props.message}\n      <div>\n        <span>{props.likeCount} like(s)</span>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post.tsx';\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\nimport { required, maxLengthCreator } from '../../../utils/validators/validators.ts';\nimport { TextArea } from '../../common/FormsControls/FormsControls.tsx';\nimport { AppStateType } from '../../../redux/redux-store.ts';\n\n//форма добавления нового поста в ленту\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field component={TextArea} name=\"newPost\" placeholder=\"Enter new post\" validate={[required, maxLengthCreator(15)]}/>\n      </div>\n      <div>\n        <button>Add post</button>\n      </div>\n    </form >\n  );\n}\n\nconst NewPostReduxForm = reduxForm<FormDataType>({ form: 'addNewPostForm' })(AddNewPostForm);\n\ntype MyPostsPropsType = {\n  addPost: (newPost: string) => void\n  posts: AppStateType[\"profilePage\"][\"posts\"]\n}\ntype FormDataType = {\n  newPost: string\n}\n//React.memo - оптимизация отрисовки, аналог PureComponent в классовой компоненте\nconst MyPosts: React.FC<MyPostsPropsType> = React.memo((props) => {\n\n  let postsElements = [...props.posts].reverse().map(p => <Post key={p.id} message={p.post} likeCount={p.likeCount} />);\n\n  const onSubmit = (formData: FormDataType) => {\n    props.addPost(formData.newPost);\n  }\n\n  return (\n    <div className={s.postBlock}>\n      <h3>My posts</h3>\n\n      <NewPostReduxForm onSubmit={onSubmit} />\n\n      <div className={s.posts}>\n        {postsElements}\n      </div>\n    </div>\n  );\n});\n\nexport default MyPosts;","import React from 'react';\nimport { actions } from '../../../redux/profile-reducer.ts';\nimport MyPosts from './MyPosts.tsx';\nimport { connect } from 'react-redux';\nimport { AppStateType } from '../../../redux/redux-store.ts';\n\ntype MapStateToPropsType = {\n  posts: AppStateType[\"profilePage\"][\"posts\"]\n}\ntype MapDispatchToPropsType = {\n  addPost: (newPost: string) => void\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n  return {\n    posts: state.profilePage.posts\n\n  };\n}\n\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {addPost: actions.addPostActionCreator})(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport s from './Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo.tsx';\nimport MyPostsContainer from './MyPosts/MyPostsContainer.tsx';\nimport { ProfileType } from '../../types/types.ts';\n\ntype PropsType = {\n  isOwner: boolean\n  profile: ProfileType | null\n  status: string\n  updateStatus: (newStatus: string) => void\n  savePhoto: (file: File) => void\n  saveProfile: (profileData: ProfileType) => void\n}\nconst Profile: React.FC<PropsType> = (props) => {\n  return (\n    <div>\n      <ProfileInfo isOwner={props.isOwner} \n                profile={props.profile} \n                status={props.status} \n                updateStatus={props.updateStatus}\n                savePhoto={props.savePhoto}\n                saveProfile={props.saveProfile} />\n      <MyPostsContainer />\n    </div>\n  );\n}\n \nexport default Profile;","import React from 'react';\nimport Profile from './Profile.tsx';\nimport { connect } from 'react-redux';\nimport { getProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer.ts';\nimport { Navigate } from \"react-router-dom\";\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect.tsx';\nimport { compose } from 'redux';\nimport { withRouter } from '../../hoc/withRouter.tsx';\nimport { AppStateType } from '../../redux/redux-store.ts';\nimport { ProfileType } from '../../types/types.ts';\n\ntype MapStateToPropsType = {\n  profile: AppStateType[\"profilePage\"][\"profile\"]\n  currentUserId: number | null\n  isAuth: boolean\n  status: string\n  isOwner?: boolean\n}\ntype MapDispatchToPropsType = {\n  getProfile: (profileId: number) => void\n  getStatus: (profileId: number) => void\n  updateStatus: (newStatus: string) => void\n  savePhoto: (file: File) => void\n  saveProfile: (profileData: ProfileType) => void\n}\ntype RouterParamsProfileIdType = {\n  profileId: number | null\n}\ntype RouterParamsType = {\n  params: RouterParamsProfileIdType\n}\ntype OwnPropsType = {\n  router: RouterParamsType\n}\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnPropsType\ntype StateType = {\n  isRedirectRoLogin: boolean\n}\n\nclass ProfileContainer extends React.Component<PropsType, StateType> {\n\n  //локальный стейт для редиректа на страницу логина, когда не авторизованы и не настранице конеретного пользователя\n  state = {\n    isRedirectRoLogin: false\n  }\n\n  activateRedirectToLogin = () => {\n    this.setState({\n      isRedirectRoLogin: true\n    });\n  }\n\n  deactivateRedirectToLogin = () => {\n    this.setState({\n      isRedirectRoLogin: false\n    });\n  }\n\n  refreshProfile() {\n    let profileId = this.props.router.params.profileId;\n    if (!profileId) {\n      profileId = this.props.currentUserId;\n      if (!profileId) {\n        this.activateRedirectToLogin();\n      }\n\n    }\n    if (profileId) {\n      this.props.getProfile(profileId);\n      this.props.getStatus(profileId);\n    }\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps: PropsType, prevState: StateType) {\n    if (this.props.router.params.profileId != prevProps.router.params.profileId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    //редирект на страницу логина\n    if (this.state.isRedirectRoLogin) {\n      this.deactivateRedirectToLogin();\n      return <Navigate to={\"/login\"} />;\n    } else {\n      return (\n        <div>\n          <Profile {...this.props}\n            isOwner={!this.props.router.params.profileId}\n            profile={this.props.profile}\n            status={this.props.status}\n            updateStatus={this.props.updateStatus}\n            savePhoto={this.props.savePhoto}\n            saveProfile={this.props.saveProfile} />\n        </div>\n      );\n    }\n  }\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n  profile: state.profilePage.profile,\n  currentUserId: state.auth.userId,\n  isAuth: state.auth.isAuth,\n  status: state.profilePage.status,\n});\n\nexport default compose<React.ComponentType>(\n  withRouter,\n  //withAuthRedirect,\n  connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(mapStateToProps, { getProfile, getStatus, updateStatus, savePhoto, saveProfile })\n)(ProfileContainer);","import React from \"react\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\n\n// wrapper to use react router's v6 hooks in class component(to use HOC pattern, like in router v5)\n//для вытаскивания данных из урла\nexport function withRouter<WCP extends React.JSX.IntrinsicAttributes>(WrappedComponent: React.ComponentType) {\n    return (props: WCP) => {\n      let location = useLocation();\n      let navigate = useNavigate();\n      let params = useParams();\n      return <WrappedComponent {...props as WCP} router={{ location, navigate, params }} />\n    }\n  }"],"names":["props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsxs","children","_jsx","onDoubleClick","activateEditMode","value","onBlur","deactivateEditMode","updateStatus","onChange","e","currentTarget","autoFocus","reduxForm","form","destroyOnUnmount","_ref","handleSubmit","profile","error","onSubmit","className","s","Field","name","component","type","placeholder","Object","keys","contacts","map","key","s_form","formSummaryError","contactTitle","contactValue","ProfileData","_Fragment","isOwner","onClick","goToEditMode","fullName","ProfileStatusWithHooks","lookingForAJob","lookingForAJobDescription","aboutMe","github","vk","facebook","instagram","twitter","website","youtube","mainLink","Contact","src","photos","large","defaultAvatar","target","files","length","savePhoto","ProfileDataForm","initialValues","formData","saveProfile","then","result","Preloader","message","likeCount","NewPostReduxForm","TextArea","validate","required","maxLengthCreator","React","postsElements","posts","reverse","p","Post","post","id","addPost","newPost","connect","state","profilePage","actions","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","ProfileContainer","constructor","arguments","isRedirectRoLogin","activateRedirectToLogin","this","setState","deactivateRedirectToLogin","refreshProfile","profileId","router","params","currentUserId","getProfile","getStatus","componentDidMount","componentDidUpdate","prevProps","prevState","render","Navigate","to","Profile","compose","WrappedComponent","location","useLocation","navigate","useNavigate","useParams","auth","userId","isAuth"],"sourceRoot":""}