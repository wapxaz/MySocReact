{"version":3,"file":"static/js/136.de20c270.chunk.js","mappings":"mJACA,QAA0B,yBAA1B,EAAkE,8BAAlE,EAA6K,0BCA7K,EAA0B,yBAA1B,EAA0D,sBAA1D,EAAwF,uB,cCMxF,MAQA,EARsCA,IAElC,IAAIC,EAAeD,EAAME,GAAK,GAAM,EAAKC,EAASA,EAClD,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAWF,EAAY,IAAMF,EAAWK,SAAEN,EAAMO,SAAc,ECV3E,GAAgB,OAAS,4B,YCQzB,MAQA,EARyCP,IAEjCI,EAAAA,EAAAA,KAAA,OAAKC,UAAWF,EAAEK,OAAS,IAAML,EAAEM,OAAOH,UACtCI,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACC,GAAI,YAAcZ,EAAME,GAAGI,SAAA,EAACF,EAAAA,EAAAA,KAAA,OAAKS,IAAKb,EAAMc,MAAO,IAAEd,EAAMe,U,4CCFhF,MAaMC,GAAyBC,EAAAA,EAAAA,GAAwB,CAAEC,KAAM,qBAAhCD,EAboCjB,IAE3DU,EAAAA,EAAAA,MAAA,QAAMS,SAAUnB,EAAMoB,aAAad,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,OAAAE,UACIF,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CAACC,UAAWC,EAAAA,EAAUR,KAAK,aAAaS,YAAY,qBAAqBC,SAAU,CAACC,EAAAA,GAAUC,EAAAA,EAAAA,GAAiB,UAEzHvB,EAAAA,EAAAA,KAAA,OAAAE,UACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,uBAuCxB,EAxB6CN,IAEzC,IAAI4B,EAAkB5B,EAAM6B,YAAYC,QAAQC,KAAIC,IAAK5B,EAAAA,EAAAA,KAAC6B,EAAU,CAAClB,KAAMiB,EAAEjB,KAAiBb,GAAI8B,EAAE9B,GAAIY,IAAKkB,EAAElB,KAAvBkB,EAAE9B,MACtFgC,EAAmBlC,EAAM6B,YAAYM,SAASJ,KAAIK,IAAKhC,EAAAA,EAAAA,KAACiC,EAAO,CAAC9B,QAAS6B,EAAE7B,QAAoBL,GAAIkC,EAAElC,IAAZkC,EAAElC,MAM/F,OACIQ,EAAAA,EAAAA,MAAA,OAAKL,UAAWF,EAAUG,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OAAKC,UAAWF,EAAeG,SAC1BsB,KAELlB,EAAAA,EAAAA,MAAA,OAAKL,UAAWF,EAAWG,SAAA,CACtB4B,GAED9B,EAAAA,EAAAA,KAACY,EAAsB,CAACG,SAZlBmB,IACdtC,EAAMuC,WAAWD,EAASE,WAAW,SAc/B,E,uBC7Bd,SAAeC,E,QAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KARmBC,IACZ,CACHf,YAAae,EAAMf,eAM2E,IAAIgB,EAAAA,IAF1G,CAGEC,E","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://my-app/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","webpack://my-app/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"dialog\":\"Dialogs_dialog__htSTl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__rjHQQ\",\"left\":\"Message_left__cWdq7\",\"right\":\"Message_right__nb5Dh\"};","import React from 'react';\nimport s from \"./Message.module.css\";\n\ntype PropsType = {\n    id: number\n    message: string\n}\nconst Message: React.FC<PropsType> = (props) => {\n    //раскидываю сообщения по разным краям окна, когда будут реальные данные, раскидывать по ид отправителя\n    let type_slyle = ((props.id % 2) != 0) ? s.left : s.right;\n    return (\n        <div className={s.message + ' ' + type_slyle}>{props.message}</div>\n    );\n}\n\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__gU34-\"};","import React from 'react';\nimport s from \"./DialogItem.module.css\";\nimport { NavLink } from 'react-router-dom';\n\ntype PropsType = {\n    id: number\n    img: string\n    name: string\n}\nconst DialogItem: React.FC<PropsType> = (props) => {\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={'/dialogs/' + props.id}><img src={props.img} /> {props.name}</NavLink>\n        </div>\n    );\n}\n\nexport default DialogItem;","import React from 'react';\nimport s from \"./Dialogs.module.css\";\nimport Message from './Message/Message.tsx';\nimport DialogItem from './DialogItem/DialogItem.tsx';\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\nimport { TextArea } from '../common/FormsControls/FormsControls.tsx';\nimport { maxLengthCreator, required } from '../../utils/validators/validators.ts';\nimport { AppStateType } from '../../redux/redux-store.ts';\n\n// для добавления нового сообщения\nconst AddNewMessage: React.FC<InjectedFormProps<FormDataType>>  = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={TextArea} name=\"newMessage\" placeholder=\"Enter your message\" validate={[required, maxLengthCreator(50)]} />\n            </div>\n            <div>\n                <button>Add message</button>\n            </div>\n        </form>\n    );\n}\n\nconst AddNewMessageReduxForm = reduxForm<FormDataType>({ form: 'addNewMessageForm' })(AddNewMessage);\n\ntype DialogsPropsType ={\n    dialogsPage: AppStateType[\"dialogsPage\"]\n    addMessage: (newMessage: string) => void\n}\ntype FormDataType = {\n    newMessage: string\n}\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\n    //оборачиваю данные из массивов в компоненты и далее отрисовываю их\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} img={d.img} />);\n    let messageselements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} id={m.id} />);\n\n    const onSubmit = (formData: FormDataType) => {\n        props.addMessage(formData.newMessage);\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messageselements}\n\n                <AddNewMessageReduxForm onSubmit={onSubmit} />\n\n            </div>\n        </div>\n    );\n}\n\nexport default Dialogs;","import React from 'react';\nimport { actions } from '../../redux/dialog-reducer.ts';\nimport Dialogs from './Dialogs.tsx';\nimport { connect } from 'react-redux';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect.tsx';\nimport { compose } from 'redux';\nimport { AppStateType } from '../../redux/redux-store.ts';\n\ntype MapStateToPropsType = {\n    dialogsPage: AppStateType[\"dialogsPage\"]\n}\ntype MapDispatchToPropsType = {\n    addMessage: (newMessage: string) => void\n}\ntype OwnPropsType = {\n\n}\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage\n    };\n}\n\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(mapStateToProps, {...actions})\n)(Dialogs);"],"names":["props","type_slyle","id","s","_jsx","className","children","message","dialog","active","_jsxs","NavLink","to","src","img","name","AddNewMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","maxLengthCreator","dialogsElements","dialogsPage","dialogs","map","d","DialogItem","messageselements","messages","m","Message","formData","addMessage","newMessage","compose","withAuthRedirect","connect","state","actions","Dialogs"],"sourceRoot":""}